from telebot import TeleBot, types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from concurrent.futures import ThreadPoolExecutor

from parser1rub import get_bybit_rub
from parser2rub import get_bingx_rub
from parser3rub import get_bitget_rub

from parser4amd import get_binance_amd
from parser5amd import get_bybit_amd
from parser6amd import get_okx_amd
from parser7amd import get_bingx_amd

from limits import can_access, is_premium, add_premium, remove_premium

bot = TeleBot(token="YOUR TELEGRAM BOT TOKEN")

ADMIN_USERNAME = "@username"
ADMIN_ID = 12345678

def gen_markup():
    markup = InlineKeyboardMarkup(row_width=2)
    markup.add(
        InlineKeyboardButton("RUB üá∑üá∫", callback_data="rub_yes"),
        InlineKeyboardButton("AMD üá¶üá≤", callback_data="amd_yes")
    )
    markup.add(
        InlineKeyboardButton("‚ú® –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å Premium", callback_data="activate_premium")
    )
    return markup

def back_markup():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
    return markup

def wallet_markup():
    markup = InlineKeyboardMarkup(row_width=1)
    markup.add(
        InlineKeyboardButton("üíµ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ TON Wallet", url="TON WALLET URL"),
        InlineKeyboardButton("üí∏ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –ÆMoney (4100119158914898)", url="–ÆMoney URL"),
        InlineKeyboardButton("üí∂ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ Idram (886226199)", url="IDRAM ID")
    )
    markup.add(InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="back"))
    return markup

@bot.message_handler(commands=['start'])
def start_bot(message):
    send_currency_selection(message.chat.id)

@bot.message_handler(commands=['mystatus'])
def my_status(message):
    if is_premium(message.chat.id):
        bot.send_message(message.chat.id, "‚ú® –£ –≤–∞—Å –∞–∫—Ç–∏–≤–µ–Ω Premium –¥–æ—Å—Ç—É–ø.")
    else:
        bot.send_message(message.chat.id, "üîí –£ –≤–∞—Å –æ–±—ã—á–Ω—ã–π –¥–æ—Å—Ç—É–ø. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ 3 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å.")

@bot.message_handler(commands=['addpremium'])
def add_premium_command(message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        chat_id = int(message.text.split()[1])
        add_premium(chat_id)
        bot.send_message(message.chat.id, f"‚úÖ Premium –≤—ã–¥–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}.")
    except Exception as e:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /addpremium <chat_id>")

@bot.message_handler(commands=['removepremium'])
def remove_premium_command(message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        chat_id = int(message.text.split()[1])
        remove_premium(chat_id)
        bot.send_message(message.chat.id, f"‚ùå Premium —É–±—Ä–∞–Ω —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {chat_id}.")
    except Exception as e:
        bot.send_message(message.chat.id, "‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /removepremium <chat_id>")

def send_currency_selection(chat_id):
    text = (
        "<b>BINANCE, BYBIT, OKX, BINGX, BITGET</b>\n\n"
        "–ë–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª—É—á—à–∏–µ –∫—É—Ä—Å—ã –æ–±–º–µ–Ω–∞ –Ω–∞ USDT üí≤.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É ‚¨áÔ∏èüí∏"
    )
    bot.send_message(chat_id, text, parse_mode='HTML', reply_markup=gen_markup())

@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    chat_id = callback.message.chat.id
    data = callback.data

    
    bot.answer_callback_query(callback.id)

    if data == "rub_yes":
        if not can_access(chat_id):
            bot.send_message(
                chat_id,
                f"<b>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç: 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å—É—Ç–∫–∏.</b>\n"
                f"–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è ‚Äî –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ Premium –∑–∞ 4 USD / 400 RUB / 1600 AMD.\n"
                f"‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ {ADMIN_USERNAME} –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫.",
                parse_mode="HTML",
                reply_markup=wallet_markup()
            )
            return

        bot.send_message(chat_id, "‚è≥ –ú–∏–Ω—É—Ç—É, –∏—â—É –ª—É—á—à–∏–π –∫—É—Ä—Å USDT –¥–ª—è RUB üá∑üá∫\nüòä–ù–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ –±–æ—Ç", reply_markup=back_markup())

        with ThreadPoolExecutor() as executor:
            future_bybit = executor.submit(get_bybit_rub)
            future_bingx = executor.submit(get_bingx_rub)
            future_bitget = executor.submit(get_bitget_rub)

            bybit_buy, bybit_sell = future_bybit.result()
            bingx_buy, bingx_sell = future_bingx.result()
            bitget_buy, bitget_sell = future_bitget.result()

        result = (
            "üìä <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã USDT (RUB)</b>:\n\n"
            "üåê <b>Bybit</b>\n"
            f"üîπ –ü–æ–∫—É–ø–∫–∞: <b>‚ÇΩ{bybit_buy}</b>\n"
            f"üî∫ –ü—Ä–æ–¥–∞–∂–∞: <b>‚ÇΩ{bybit_sell}</b>\n\n"
            "üåê <b>BingX</b>\n"
            f"üîπ –ü–æ–∫—É–ø–∫–∞: <b>{bingx_buy}</b>\n"
            f"üî∫ –ü—Ä–æ–¥–∞–∂–∞: <b>{bingx_sell}</b>\n\n"
            "üåê <b>Bitget</b>\n"
            f"üîπ –ü–æ–∫—É–ø–∫–∞: <b>‚ÇΩ{bitget_buy}</b>\n"
            f"üî∫ –ü—Ä–æ–¥–∞–∂–∞: <b>‚ÇΩ{bitget_sell}</b>"
        )

        bot.send_message(chat_id, result, parse_mode="HTML", reply_markup=back_markup())

    elif data == "amd_yes":
        if not can_access(chat_id):
            bot.send_message(
                chat_id,
                f"<b>–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç: 3 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å—É—Ç–∫–∏.</b>\n"
                f"–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è ‚Äî –∞–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ Premium –∑–∞ 4 USD / 400 RUB / 1600 AMD.\n"
                f"‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ {ADMIN_USERNAME} –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫.",
                parse_mode="HTML",
                reply_markup=wallet_markup()
            )
            return

        bot.send_message(chat_id, "‚è≥ –ú–∏–Ω—É—Ç—É, –∏—â—É –ª—É—á—à–∏–π –∫—É—Ä—Å USDT –¥–ª—è AMD üá¶üá≤\nüòä–ù–µ –∑–∞–∫—Ä—ã–≤–∞–π—Ç–µ –±–æ—Ç", reply_markup=back_markup())

        with ThreadPoolExecutor() as executor:
            future_binance = executor.submit(get_binance_amd)
            future_bybit = executor.submit(get_bybit_amd)
            future_okx = executor.submit(get_okx_amd)
            future_bingx = executor.submit(get_bingx_amd)

            binance_buy, binance_sell = future_binance.result()
            bybit_buy, bybit_sell = future_bybit.result()
            okx_buy, okx_sell = future_okx.result()
            bingx_buy, bingx_sell = future_bingx.result()

        result = (
            "üìä <b>–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã USDT (AMD)</b>:\n\n"
            "üåê <b>Binance</b>\n"
            f"üîπ –ü–æ–∫—É–ø–∫–∞: <b>÷è{binance_buy}</b>\n"
            f"üî∫ –ü—Ä–æ–¥–∞–∂–∞: <b>÷è{binance_sell}</b>\n\n"
            "üåê <b>Bybit</b>\n"
            f"üîπ –ü–æ–∫—É–ø–∫–∞: <b>÷è{bybit_buy}</b>\n"
            f"üî∫ –ü—Ä–æ–¥–∞–∂–∞: <b>÷è{bybit_sell}</b>\n\n"
            "üåê <b>OKX</b>\n"
            f"üîπ –ü–æ–∫—É–ø–∫–∞: <b>÷è{okx_buy}</b>\n"
            f"üî∫ –ü—Ä–æ–¥–∞–∂–∞: <b>÷è{okx_sell}</b>\n\n"
            "üåê <b>BingX</b>\n"
            f"üîπ –ü–æ–∫—É–ø–∫–∞: <b>{bingx_buy}</b>\n"
            f"üî∫ –ü—Ä–æ–¥–∞–∂–∞: <b>{bingx_sell}</b>"
        )

        bot.send_message(chat_id, result, parse_mode="HTML", reply_markup=back_markup())

    elif data == "activate_premium":
        text = (
            "<b>–î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ Premium –¥–æ—Å—Ç—É–ø–∞</b>\n\n"
            "üí≤ –°—Ç–æ–∏–º–æ—Å—Ç—å: 4 USD / 400 RUB / 1600 AMD –≤ –º–µ—Å—è—Ü\n"
            f"‚úâÔ∏è –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç {ADMIN_USERNAME} —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º."
        )
        bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=wallet_markup())

    elif data == "back":
        
        send_currency_selection(chat_id)

@bot.message_handler(func=lambda message: True, content_types=['text'])
def handle_unknown_message(message):
    
    if message.text.startswith('/'):
        return

    bot.send_message(
        message.chat.id,
        "‚ùóÔ∏è–Ø –ø–æ–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏.\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.",
        reply_markup=gen_markup()
    )



bot.infinity_polling(allowed_updates=['message', 'callback_query'])
